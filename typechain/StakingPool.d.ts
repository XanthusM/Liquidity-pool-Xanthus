/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingPoolInterface extends ethers.utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "claimableReward()": FunctionFragment;
    "endStake(uint256)": FunctionFragment;
    "getCurrentRewardPeriodId()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getRewardPeriodsCount()": FunctionFragment;
    "getRewardsStats()": FunctionFragment;
    "getStakedBalance()": FunctionFragment;
    "newRewardPeriod(uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "rewardPeriods(uint256)": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "startStake(uint256)": FunctionFragment;
    "totalStakes()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimableReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPeriodsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newRewardPeriod",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPeriods",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakes",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPeriodsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakes",
    data: BytesLike
  ): Result;

  events: {
    "RewardPaid(address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "UnStaked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnStaked"): EventFragment;
}

export type RewardPaidEvent = TypedEvent<
  [string, BigNumber] & { user: string; reward: BigNumber }
>;

export type StakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type UnStakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export class StakingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingPoolInterface;

  functions: {
    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    endStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentRewardPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardPeriodsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardsStats(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          claimableRewards: BigNumber;
          rewardsPaid: BigNumber;
          rewardRate: BigNumber;
          totalRewardsPaid: BigNumber;
        }
      ]
    >;

    getStakedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    newRewardPeriod(
      reward: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rewardPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        reward: BigNumber;
        from: BigNumber;
        to: BigNumber;
        lastUpdated: BigNumber;
        totalStaked: BigNumber;
        rewardPerTokenStaked: BigNumber;
        totalRewardsPaid: BigNumber;
      }
    >;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    startStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalStakes(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimableReward(overrides?: CallOverrides): Promise<BigNumber>;

  endStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentRewardPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardPeriodsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardsStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      claimableRewards: BigNumber;
      rewardsPaid: BigNumber;
      rewardRate: BigNumber;
      totalRewardsPaid: BigNumber;
    }
  >;

  getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  newRewardPeriod(
    reward: BigNumberish,
    from: BigNumberish,
    to: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rewardPeriods(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      reward: BigNumber;
      from: BigNumber;
      to: BigNumber;
      lastUpdated: BigNumber;
      totalStaked: BigNumber;
      rewardPerTokenStaked: BigNumber;
      totalRewardsPaid: BigNumber;
    }
  >;

  stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  startStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimableReward(overrides?: CallOverrides): Promise<BigNumber>;

    endStake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getCurrentRewardPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPeriodsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        claimableRewards: BigNumber;
        rewardsPaid: BigNumber;
        rewardRate: BigNumber;
        totalRewardsPaid: BigNumber;
      }
    >;

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    newRewardPeriod(
      reward: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    rewardPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        reward: BigNumber;
        from: BigNumber;
        to: BigNumber;
        lastUpdated: BigNumber;
        totalStaked: BigNumber;
        rewardPerTokenStaked: BigNumber;
        totalRewardsPaid: BigNumber;
      }
    >;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startStake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "RewardPaid(address,uint256)"(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    RewardPaid(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    "Staked(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Staked(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "UnStaked(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    UnStaked(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimableReward(overrides?: CallOverrides): Promise<BigNumber>;

    endStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentRewardPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPeriodsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsStats(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    newRewardPeriod(
      reward: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentRewardPeriodId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardPeriodsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newRewardPeriod(
      reward: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalStakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
